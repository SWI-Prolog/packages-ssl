\documentclass[11pt]{article}
\usepackage{times}
\usepackage{pl}
\usepackage{html}
\sloppy
\makeindex

\onefile
\htmloutput{.}					% Output directory
\htmlmainfile{ssl}				% Main document file
\bodycolor{white}				% Page colour

\begin{document}

%\urldef{\diff}\url[Diff Automatisering v.o.f]{http://www.diff.nl}

\title{SWI-Prolog SSL Interface}
\author{Jan van der Steen \\
	\url[Diff Automatisering v.o.f]{http://www.diff.nl} \\[5pt]
	Jan Wielemaker \\
        SWI, University of Amsterdam \\
        The Netherlands \\
        E-mail: \email{jan@swi-prolog.org}
       }

\maketitle

\begin{abstract}
This document describes the SWI-Prolog SSL library, a set of predicates
which provides secure sockets to Prolog applications, for example to run
a secure HTTPS server, or access websites using the \const{https}
protocol.  It can also be used to provide authentication and secure
data exchange between Prolog processes over the network.
\end{abstract}

\pagebreak
\tableofcontents
\pagebreak


\section{Introduction}
\label{sec:ssl-intro}

Raw TCP/IP networking is dangerous for two reasons.  It is hard to tell
whether the body you think you are talking to is indeed the right one and
anyone with access to a subnet through which your data flows can `tap'
the wire and listen for sensitive information such as passwords,
creditcard numbers, etc.   Secure Socket Layer (SSL) deals with both
problems.  It uses certificates to establish the identity of the peer
and encryption to make it useless to tap into the wire.  SSL allows
agents to talk in private and create secure web services.

The SWI-Prolog \pllib{ssl} library provides an API to turn arbitrary
Prolog stream into SSL powered encrypted streams.

\input{ssllib.tex}

\subsection{Accessing an HTTPS server}
\label{sec:ssl-https-client}

Accessing an =|https://|= server can be achieved using the code skeleton
below.  See ssl_context/3 for the \term{cert_verify_hook}{:Hook} option.

\begin{code}
:- use_module(library(http/http_open)).
:- use_module(library(http/http_ssl_plugin)).

cert_verify(_SSL, _ProblemCert, _AllCerts, _FirstCert, _Error) :-
	format(user_error, 'Accepting certificate~n', []).

	...,
	http_open(HTTPS_url, In,
		  [ cert_verify_hook(cert_verify)
		  ]),
	...
\end{code}


\subsection{Creating an HTTPS server}
\label{sec:ssl-https-server}

The HTTP server is started in HTTPS mode by adding an option \const{ssl}
to http_server/2. The argument of the \const{ssl} option is an option
list passed to ssl_init/3. Here is an example that uses the demo
certificates distributed with the SSL package.

\begin{code}
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_ssl_plugin)).

https_server(Port, Options) :-
        http_server(reply,
                    [ port(Port),
                      timeout(60),
                      ssl([ host('localhost'),
                            cacert_file('etc/demoCA/cacert.pem'),
                            certificate_file('etc/server/server-cert.pem'),
                            key_file('etc/server/server-key.pem'),
                            password('apenoot1')
                          ])
                    | Options
                    ]).
\end{code}


\section{Example code}
\label{sec:ssl-examples}

Examples of a simple server and client (\file{server.pl} and
\file{client.pl} as well as a simple HTTPS server (\file{https.pl}) can
be found in the example directory which is located in
\file{doc/packages/examples/ssl} relative to the SWI-Prolog installation
directory. The \file{etc} directory contains example certificate files
as well as a \file{README} on the creation of certificates using OpenSSL
tools.


\section{Multithreading}
\label{sec:ssl-thread-safety}

OpenSSL is not intrinsically threadsafe, but can be made so by providing
some callbacks for managing locking. These callbacks are installed when the
ssl4pl library is loaded, and will overwrite any existing callbacks.

When the ssl4pl library is unloaded, the original callbacks will be restored.

\section{Acknowledgments}
\label{sec:ssl-acknowledgments}

The development of the SWI-Prolog SSL interface has been sponsored by
\url[Scientific Software and Systems Limited]{http://www.sss.co.nz}.

\bibliographystyle{plain}
\bibliography{odbc}

\printindex

\end{document}

